AWS SAP 

AWS ACCOUNT:
	Multiple accounts can have same billing card but should have separate unique email IDs.

AWS Organization:
	Benefit of using Organization is that we use IAM roles assigned to one single IAM User in order to access multiple accounts within the organizations instead of having to make separate IAM users inside the AWS member accounts.
	Service Control Policies (SCPs) in AWS Organizations primarily restrict the actions of the root user in member accounts, not the management account.
	SCP doesn't ALLOW any permission but it has a default fullAWSAccess which initially allows all access to setup the organization and then mention the deny rule for the specific services you want to block.
	You might receive an error when trying to add an account to the AWS organizations in which case you need to log a request for qouta increase from AWS helpdesk.
	If you add an already created account to the organization, you need to create a role withihn it so that other accounts can have access to that account. But if you create a new account within AWS organizations then this role is created along with the account by the Organizations.
	IAM -----> Roles -----> Create Role -----> trusted entity (AWS account) -----> Account ID of the management account (acct that is trusted to assume the role) -----> Attach policy (adm access)
	Role name as per standard AWS practices -----> OrganizationAccountAccessRole
	While giving name to the Role in Switch Role, use the same name which is given in the account the role was created.

STS:
	STS roles can be assumed either by a user or a service or an external web identity via sts:assumerole.
	STS checks the role trust policy as well as the permission policy to allow or deny access to the identity.
	Trust policy is to check wether an identity is allowed the access or not where as the permission policy checks if the permission inside the aws account is granted for a certain service through the role.
	temporary credentials generated by STS are:
	a.AccesskeyId
	b.Expiration
	c.SecretAccesskey
	d.Sessiontoken

Revoking Temporary Credentials:
	AWSRevokeOlderSessions inline policy is used to deny any access before now till the time the sts role was assumed. It does not apply to any role assumed after the moment the inline policy is run.

Policy interpretation:
	There are three s3 actions with which you need the wildcard in the resource section:
	i.   s3:ListAllMyBuckets
	ii.  s3:GetBucketLocation
	iii. s3:CreateBucket
	
	IAM Policy document variable ${aws:username} to check against the IAM user the policy is attached to instead of hard coding the policy and for reusability purposes.
	There are other policy document variables as well.

Policy Evalaution Logic:
	If the Identity and resource are in different accounts then the SCP of the identity account will be considered to check for the SCP evaluation and not the SCP of the resource account.
	Session policy is the reduced set of permissions of an iam role which has a full access to the identity or permissions policy.
	Explicit Deny -----> SCPs -----> Resource Policies -----> Permissions Boundaries -----> Session Policies -----> Identity Policies

Cross Account Permissions:
	using ACLs you need to put the Canonical ID of the account which you use to access the bucket in another account. Add the canonical id in the grantee section of the ACLs permissions of the bucket. Remember that the object uploaded through the new account can not be accessed by the account in which the bucket is created.
	Put the account ID and the user name of the account you want to get access to the s3 bucket in the bucket policy of the s3 bucket. Also mention the resource bucket arn and bucket objects (/*) separately to get access to the bucket objects. Note that we still don't have access to the objects of the bucket created by the external account.
	You can change the ownership of the objects from the writer to the bucket owner or vice versa in the object ownership.
	The best way to allow cross account access to the buckets without compromising on the object ownership is creating a role and then letting other accounts to assume that role to upload the objects. The role will have the necessary permissions that the external account can assume provided that account has the persmission to do so.

AWS Budgets:
	Billing Preferences -----> Budget
	
